diff --git a/django/conf/__init__.py b/django/conf/__init__.py
--- a/django/conf/__init__.py
+++ b/django/conf/__init__.py
@@ -157,8 +157,9 @@ def configured(self):
     def USE_L10N(self):
         stack = traceback.extract_stack()
         # Show a warning if the setting is used outside of Django.
-        # Stack index: -1 this line, -2 the caller.
-        filename, _, _, _ = stack[-2]
+        # Stack index: -1 this line, -2 the LazyObject __getattribute__(),
+        # -3 the caller.
+        filename, _, _, _ = stack[-3]
         if not filename.startswith(os.path.dirname(django.__file__)):
             warnings.warn(
                 USE_L10N_DEPRECATED_MSG,
diff --git a/django/utils/functional.py b/django/utils/functional.py
--- a/django/utils/functional.py
+++ b/django/utils/functional.py
@@ -266,6 +266,7 @@ def inner(self, *args):
             self._setup()
         return func(self._wrapped, *args)
 
+    inner._mask_wrapped = False
     return inner
 
 
@@ -286,6 +287,14 @@ def __init__(self):
         # override __copy__() and __deepcopy__() as well.
         self._wrapped = empty
 
+    def __getattribute__(self, name):
+        value = super().__getattribute__(name)
+        # If attribute is a proxy method, raise an AttributeError to call
+        # __getattr__() and use the wrapped object method.
+        if not getattr(value, "_mask_wrapped", True):
+            raise AttributeError
+        return value
+
     __getattr__ = new_method_proxy(getattr)
 
     def __setattr__(self, name, value):
