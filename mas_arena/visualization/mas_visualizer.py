"""
Multi-Agent System (MAS) Visualization Utility

This module provides tools to visualize multi-agent system interactions
using the data generated by the AgentSystem class.
"""

import json
import os
from pathlib import Path
import webbrowser
import argparse
import datetime


class BenchmarkVisualizer:
    """Utility for visualizing benchmark results and agent interactions across multiple problems"""
    
    def __init__(self, output_dir=None):
        """
        Initialize the benchmark visualizer.
        
        Args:
            output_dir: Directory to save visualization HTML files
        """
        self.output_dir = Path(output_dir or "results/visualizations/html")
        self.output_dir.mkdir(parents=True, exist_ok=True)
        self.mas_visualizer = MASVisualizer(output_dir)
        
    def generate_summary_html(self, summary_data, results_data, problem_visualizations=None, title=None):
        """
        Generate HTML for visualizing benchmark summary with links to problem visualizations.
        
        Args:
            summary_data: Dictionary with benchmark summary data
            results_data: List of problem results data
            problem_visualizations: Optional dictionary mapping problem_id to visualization file paths
            title: Optional title for the visualization
            
        Returns:
            HTML string
        """
        if not summary_data:
            return "<html><body><h1>No benchmark summary data available</h1></body></html>"
            
        benchmark_name = summary_data.get("benchmark", "unknown")
        agent_system = summary_data.get("agent_system", "unknown")
        title = title or f"Benchmark Results - {agent_system} - {benchmark_name}"
        
        # Format metrics for display
        accuracy = summary_data.get("accuracy", 0) * 100
        total_problems = summary_data.get("total_problems", 0)
        correct = summary_data.get("correct", 0)
        total_duration_ms = summary_data.get("total_duration_ms", 0)
        avg_duration_ms = summary_data.get("avg_duration_ms", 0)
        
        # Calculate additional metrics
        total_tokens = sum(result.get("llm_usage", {}).get("total_tokens", 0) for result in results_data)
        avg_tokens = total_tokens / total_problems if total_problems > 0 else 0
        
        # Create problem visualization links if provided
        problem_links = {}
        if problem_visualizations:
            for problem_id, viz_path in problem_visualizations.items():
                if os.path.exists(viz_path):
                    problem_links[problem_id] = os.path.relpath(viz_path, self.output_dir)
        
        # Escape JSON for embedding in HTML
        results_json = json.dumps(results_data)
        problem_links_json = json.dumps(problem_links)
        
        now = datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S')

        # Create HTML with modern design
        html = """<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>{title}</title>
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <!-- MathJax for LaTeX support -->
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    <!-- Chart.js for visualizations -->
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
        :root {{
            --primary-color: #4a6ee0;
            --primary-light: rgba(74, 110, 224, 0.1);
            --secondary-color: #6c757d;
            --success-color: #28a745;
            --info-color: #17a2b8;
            --warning-color: #ffc107;
            --danger-color: #dc3545;
            --error-color: #ff6b6b;
            --light-color: #f8f9fa;
            --dark-color: #343a40;
            --border-radius: 8px;
            --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }}
        
        * {{
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }}
        
        body {{
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f5f5f5;
            color: #333;
            --border-radius: 8px;
            --box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            height: 100vh;
            overflow-y: auto;
        }}
        
        .container {{
            display: flex;
            flex-direction: column;
            height: 100vh;
            max-height: 100vh;
            padding: 20px;
            max-width: 1400px;
            margin: 0 auto;
            overflow: hidden;
        }}
        
        .header {{
            background-color: white;
            border-radius: var(--border-radius);
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: var(--box-shadow);
            flex-shrink: 0;
        }}
        
        .header h1 {{
            color: var(--primary-color);
            font-size: 24px;
            margin-bottom: 10px;
        }}
        
        .header p {{
            color: var(--secondary-color);
            font-size: 14px;
        }}
        
        .summary-stats {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(240px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
        }}
        
        .stat-card {{
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 20px;
            display: flex;
            flex-direction: column;
        }}
        
        .stat-card .stat-title {{
            font-size: 14px;
            color: var(--secondary-color);
            margin-bottom: 10px;
        }}
        
        .stat-card .stat-value {{
            font-size: 24px;
            font-weight: 500;
            color: var(--primary-color);
            margin-bottom: 5px;
        }}
        
        .stat-card .stat-subtitle {{
            font-size: 12px;
            color: var(--secondary-color);
        }}
        
        .charts {{
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(400px, 1fr));
            gap: 20px;
            margin-bottom: 20px;
            height: 400px;
            max-height: 400px;
            overflow: hidden;
        }}
        
        .chart-container {{
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 20px;
            height: 360px;
            overflow: hidden;
        }}
        
        .chart-title {{
            font-size: 16px;
            font-weight: 500;
            margin-bottom: 15px;
            color: var(--dark-color);
        }}
        
        .problems-list {{
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 20px;
            margin-bottom: 20px;
            height: calc(100vh - 640px);
            max-height: calc(100vh - 640px);
            overflow-y: auto;
            min-height: 200px;
        }}
        
        .problems-list h2 {{
            font-size: 18px;
            font-weight: 500;
            margin-bottom: 15px;
            color: var(--dark-color);
        }}
        
        .problem-card {{
            border: 1px solid #eee;
            border-radius: var(--border-radius);
            padding: 15px;
            margin-bottom: 15px;
            transition: var(--transition);
            background-color: var(--light-color);
        }}
        
        .problem-card:hover {{
            box-shadow: var(--box-shadow);
        }}
        
        .problem-card.correct {{
            border-left: 4px solid var(--success-color);
        }}
        
        .problem-card.incorrect {{
            border-left: 4px solid var(--danger-color);
        }}
        
        .problem-card.errored {{
            border-left: 4px solid var(--error-color);
        }}
        
        .problem-header {{
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }}
        
        .problem-id {{
            font-weight: 500;
            font-size: 16px;
        }}
        
        .problem-metrics {{
            display: flex;
            gap: 10px;
            font-size: 13px;
            color: var(--secondary-color);
        }}
        
        .problem-metric {{
            display: flex;
            align-items: center;
            gap: 5px;
        }}
        
        .problem-content {{
            margin-bottom: 15px;
            padding: 10px;
            background-color: white;
            border-radius: var(--border-radius);
        }}
        
        .problem-solution {{
            margin-top: 10px;
            padding: 10px;
            background-color: var(--primary-light);
            border-radius: var(--border-radius);
        }}
        
        .problem-footer {{
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-top: 15px;
        }}
        
        .view-details {{
            padding: 6px 12px;
            border: none;
            background-color: var(--primary-color);
            color: white;
            border-radius: var(--border-radius);
            cursor: pointer;
            font-weight: 500;
            font-size: 14px;
            transition: var(--transition);
            text-decoration: none;
            display: inline-block;
        }}
        
        .view-details:hover {{
            background-color: #3a5ad1;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }}
        
        .badge {{
            padding: 4px 8px;
            border-radius: 12px;
            font-size: 12px;
            font-weight: 500;
        }}
        
        .badge-success {{
            background-color: var(--success-color);
            color: white;
        }}
        
        .badge-danger {{
            background-color: var(--danger-color);
            color: white;
        }}

        .badge-errored {{
            background-color: var(--error-color);
            color: white;
        }}
        
        .footer {{
            margin-top: auto;
            text-align: center;
            padding: 20px;
            color: var(--secondary-color);
            font-size: 12px;
        }}
        
        /* Expand/collapse problem details */
        .problem-details {{
            display: none;
            margin-top: 15px;
        }}
        
        .problem-card.expanded .problem-details {{
            display: block;
        }}

        .toggle-details {{
            background: none;
            border: none;
            cursor: pointer;
            color: var(--primary-color);
            font-size: 14px;
            display: flex;
            align-items: center;
            gap: 5px;
        }}
        
        @media screen and (max-width: 768px) {{
            .summary-stats,
            .charts {{
                grid-template-columns: 1fr;
            }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>{title}</h1>
            <p>Agent System: {agent_system} | Benchmark: {benchmark_name} | Generated: {now}</p>
        </div>
        
        <div class="summary-stats">
            <div class="stat-card">
                <div class="stat-title">Accuracy</div>
                <div class="stat-value" id="accuracy-value">{accuracy:.1f}%</div>
                <div class="stat-subtitle" id="accuracy-subtitle">{correct} correct out of {total_problems} problems</div>
            </div>
            <div class="stat-card">
                <div class="stat-title">Total Duration</div>
                <div class="stat-value" id="total-duration-value">{total_duration_s:.2f}s</div>
                <div class="stat-subtitle" id="avg-duration-value">Average: {avg_duration_s:.2f}s per problem</div>
            </div>
            <div class="stat-card">
                <div class="stat-title">Token Usage</div>
                <div class="stat-value" id="total-tokens-value">{total_tokens:,}</div>
                <div class="stat-subtitle" id="avg-tokens-value">Average: {avg_tokens:.1f} tokens per problem</div>
            </div>
            <div class="stat-card">
                <div class="stat-title">Agent System</div>
                <div class="stat-value">{agent_system}</div>
                <div class="stat-subtitle">Benchmark: {benchmark_name}</div>
            </div>
        </div>
        
        <div class="charts">
            <div class="chart-container">
                <div class="chart-title">Performance Overview</div>
                <canvas id="performanceChart"></canvas>
            </div>
            <div class="chart-container">
                <div class="chart-title">Token Usage by Problem</div>
                <canvas id="tokenChart"></canvas>
            </div>
        </div>
        
        <div class="problems-list" id="problems-list-container">
            <h2>Problem Results</h2>
            <div id="problemsList"></div>
        </div>
        
        <div class="footer">
            Generated by Multi-Agent System Benchmark Visualizer | {now}
        </div>
    </div>
    
    <script>
    // Load the results data
    const resultsData = {results_json};
    const problemLinks = {problem_links_json};
    
    // Initialize charts when document is loaded
    document.addEventListener('DOMContentLoaded', () => {{
        // Create performance overview chart
        createPerformanceChart();
        
        // Create token usage chart
        createTokenChart();
        
        // Create problem list
        createProblemsList();
        
        // Initialize MathJax rendering
        if (window.MathJax) {{
            MathJax.typesetPromise();
        }}
    }});
    
    // Create performance overview chart
    function createPerformanceChart() {{
        const ctx = document.getElementById('performanceChart').getContext('2d');
        
        // Extract data for chart
        const problemIds = resultsData.map(r => r.problem_id);
        const durations = resultsData.map(r => r.duration_ms / 1000); // Convert to seconds
        const correctness = resultsData.map(r => r.score === 1 ? 'Correct' : 'Incorrect');
        
        // Create colors array based on correctness
        const colors = correctness.map(c => c === 'Correct' ? '#28a745' : '#dc3545');
        
        new Chart(ctx, {{
            type: 'bar',
            data: {{
                labels: problemIds,
                datasets: [{{
                    label: 'Duration (seconds)',
                    data: durations,
                    backgroundColor: colors,
                    borderColor: colors.map(c => c === '#28a745' ? '#218838' : '#c82333'),
                    borderWidth: 1
                }}]
            }},
            options: {{
                responsive: true,
                maintainAspectRatio: false,
                scales: {{
                    y: {{
                        beginAtZero: true,
                        title: {{
                            display: true,
                            text: 'Duration (seconds)'
                        }}
                    }},
                    x: {{
                        title: {{
                            display: true,
                            text: 'Problem ID'
                        }}
                    }}
                }},
                plugins: {{
                    tooltip: {{
                        callbacks: {{
                            afterLabel: function(context) {{
                                const index = context.dataIndex;
                                return correctness[index];
                            }}
                        }}
                    }}
                }}
            }}
        }});
    }}
    
    // Create token usage chart
    function createTokenChart() {{
        const ctx = document.getElementById('tokenChart').getContext('2d');
        
        // Extract data for chart
        const problemIds = resultsData.map(r => r.problem_id);
        const tokenUsage = resultsData.map(r => r.llm_usage?.total_tokens || 0);
        
        new Chart(ctx, {{
            type: 'bar',
            data: {{
                labels: problemIds,
                datasets: [{{
                    label: 'Token Usage',
                    data: tokenUsage,
                    backgroundColor: 'rgba(74, 110, 224, 0.7)',
                    borderColor: 'rgba(74, 110, 224, 1)',
                    borderWidth: 1
                }}]
            }},
            options: {{
                responsive: true,
                maintainAspectRatio: false,
                scales: {{
                    y: {{
                        beginAtZero: true,
                        title: {{
                            display: true,
                            text: 'Token Count'
                        }}
                    }},
                    x: {{
                        title: {{
                            display: true,
                            text: 'Problem ID'
                        }}
                    }}
                }}
            }}
        }});
    }}
    
    // Create problems list
    function createProblemsList() {{
        const problemsListContainer = document.getElementById('problemsList');
        
        resultsData.forEach(problem => {{
            let statusText, cardClass, badgeClass;

            if (problem.status === 'error') {{
                statusText = 'Errored';
                cardClass = 'errored';
                badgeClass = 'badge-errored';
            }} else if (problem.is_correct || problem.score > 0.5) {{
                statusText = 'Passed';
                cardClass = 'correct';
                badgeClass = 'badge-success';
            }} else {{
                statusText = 'Incorrect';
                cardClass = 'incorrect';
                badgeClass = 'badge-danger';
            }}

            const problem_id = problem.problem_id || 'N/A';
            const duration = problem.duration_ms / 1000; // Convert to seconds
            const tokenCount = problem.llm_usage?.total_tokens || 0;
            
            const problemCard = document.createElement('div');
            problemCard.className = `problem-card ${{cardClass}}`;
            problemCard.id = `problem-${{problem_id}}`;
            
            // Create problem header
            const problemHeader = document.createElement('div');
            problemHeader.className = 'problem-header';
            
            const problemIdElem = document.createElement('div');
            problemIdElem.className = 'problem-id';
            problemIdElem.textContent = problem_id;
            
            const problemMetrics = document.createElement('div');
            problemMetrics.className = 'problem-metrics';
            
            // Add badge for correctness
            const correctnessBadge = document.createElement('span');
            correctnessBadge.className = `badge ${{badgeClass}}`;
            correctnessBadge.textContent = statusText;
            
            // Add duration metric
            const durationMetric = document.createElement('div');
            durationMetric.className = 'problem-metric';
            durationMetric.innerHTML = `<span>⏱️</span> ${{duration.toFixed(2)}}s`;
            
            // Add token metric
            const tokenMetric = document.createElement('div');
            tokenMetric.className = 'problem-metric';
            tokenMetric.innerHTML = `<span>🔤</span> ${{tokenCount.toLocaleString()}} tokens`;
            
            problemMetrics.appendChild(correctnessBadge);
            problemMetrics.appendChild(durationMetric);
            problemMetrics.appendChild(tokenMetric);
            
            problemHeader.appendChild(problemIdElem);
            problemHeader.appendChild(problemMetrics);
            
            // Create toggle button
            const toggleButton = document.createElement('button');
            toggleButton.className = 'toggle-details';
            toggleButton.innerHTML = 'Show Details';
            toggleButton.onclick = () => {{
                problemCard.classList.toggle('expanded');
                toggleButton.innerHTML = problemCard.classList.contains('expanded') ? 'Hide Details' : 'Show Details';
                
                // Render LaTeX if details expanded
                if (problemCard.classList.contains('expanded') && window.MathJax) {{
                    MathJax.typesetPromise([problemCard]);
                }}
            }};
            
            // Create problem content
            const problemContent = document.createElement('div');
            problemContent.className = 'problem-details';
            
            // Add problem statement
            const problemStatement = document.createElement('div');
            problemStatement.className = 'problem-content';
            problemStatement.innerHTML = `<strong>Problem:</strong><div>${{problem.problem}}</div>`;
            
            // Add solution
            const problemSolution = document.createElement('div');
            problemSolution.className = 'problem-solution';
            problemSolution.innerHTML = `<strong>Solution:</strong><div>${{problem.prediction}}</div>`;
            
            // Add expected answer
            const expectedAnswer = document.createElement('div');
            expectedAnswer.className = 'problem-solution';
            expectedAnswer.innerHTML = `<strong>Expected:</strong><div>${{problem.expected}}</div>`;
            
            problemContent.appendChild(problemStatement);
            problemContent.appendChild(problemSolution);
            problemContent.appendChild(expectedAnswer);
            
            // Create problem footer with link to visualization if available
            const problemFooter = document.createElement('div');
            problemFooter.className = 'problem-footer';
            
            problemFooter.appendChild(toggleButton);
            
            // Add link to visualization if available
            const vizLinkContainer = document.createElement('div');
            if (problemLinks[problem_id]) {{
                const vizLink = document.createElement('a');
                vizLink.href = problemLinks[problem_id];
                vizLink.className = 'view-details';
                vizLink.textContent = 'View Agent Interactions';
                vizLink.target = '_blank';
                vizLinkContainer.appendChild(vizLink);
            }}
            problemFooter.appendChild(vizLinkContainer);
            
            // Assemble problem card
            problemCard.appendChild(problemHeader);
            problemCard.appendChild(problemFooter);
            problemCard.appendChild(problemContent);
            
            problemsListContainer.appendChild(problemCard);
        }});
    }}
    </script>
</body>
</html>
""".format(
            title=title,
            agent_system=agent_system,
            benchmark_name=benchmark_name,
            now=now,
            accuracy=accuracy,
            correct=correct,
            total_problems=total_problems,
            total_duration_s=total_duration_ms/1000,
            avg_duration_s=avg_duration_ms/1000 if avg_duration_ms else 0,
            total_tokens=total_tokens,
            avg_tokens=avg_tokens,
            results_json=results_json,
            problem_links_json=problem_links_json,
        )
        return html
        
    def visualize_benchmark(self, summary_file, results_file=None, visualizations_dir=None, output_file=None):
        """
        Generate HTML visualization from benchmark summary file with links to problem visualizations.
        
        Args:
            summary_file: Path to the benchmark summary JSON file
            results_file: Optional path to the benchmark results JSON file
            visualizations_dir: Optional directory containing problem visualizations
            output_file: Optional path to save the HTML output
            
        Returns:
            Path to the generated HTML file
        """
        # Load summary data
        with open(summary_file, 'r') as f:
            summary_data = json.load(f)
        
        # Load results data from the path specified in the summary file
        results_data = []
        results_file_path = results_file or summary_data.get("results_file")
        if results_file_path and os.path.exists(results_file_path):
            with open(results_file_path, 'r') as f:
                # The JSON file is a dictionary, we need the value of the "results" key
                data = json.load(f)
                results_data = data.get("results", [])
        
        # Find problem visualizations if directory provided
        problem_visualizations = {}
        if visualizations_dir:
            viz_dir = Path(visualizations_dir)
            agent_system = summary_data.get("agent_system", "")
            
            if agent_system and viz_dir.exists():
                # Look for visualization files for each problem in results
                for result in results_data:
                    problem_id = result.get("problem_id")
                    if problem_id:
                        # Find the most recent visualization file for this problem
                        viz_files = list(viz_dir.glob(f"viz_{agent_system}_{problem_id}_*.json"))
                        if viz_files:
                            # Sort by timestamp to get most recent
                            viz_files.sort(key=lambda f: f.stat().st_mtime, reverse=True)
                            # Convert to HTML path if exists, otherwise JSON path
                            html_path = viz_files[0].with_suffix('.html')
                            if html_path.exists():
                                problem_visualizations[problem_id] = str(html_path)
                            else:
                                # Try to generate HTML
                                try:
                                    html_file = self.mas_visualizer.visualize(viz_files[0], open_browser=False)
                                    problem_visualizations[problem_id] = str(html_file)
                                except Exception as e:
                                    print(f"Error generating HTML for {problem_id}: {e}")
        
        # Generate HTML
        html = self.generate_summary_html(
            summary_data=summary_data,
            results_data=results_data,
            problem_visualizations=problem_visualizations
        )
        
        # Determine output filename
        if not output_file:
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            benchmark_name = summary_data.get("benchmark", "unknown")
            agent_system = summary_data.get("agent_system", "unknown")
            output_file = self.output_dir / f"benchmark_{agent_system}_{benchmark_name}_{timestamp}.html"
            
        # Save HTML file
        with open(output_file, 'w', encoding='utf-8') as f:
            f.write(html)
            
        # Open in browser
        webbrowser.open(f"file://{os.path.abspath(output_file)}")
        
        return output_file


class MASVisualizer:
    """Utility for visualizing Multi-Agent System interactions"""
    
    def __init__(self, output_dir=None):
        """
        Initialize the MAS visualizer.
        
        Args:
            output_dir: Directory to save visualization HTML files
        """
        self.output_dir = Path(output_dir or "results/visualizations/html")
        self.output_dir.mkdir(parents=True, exist_ok=True)
        
    def generate_html(self, visualization_data, title=None):
        """
        Generate HTML for visualizing agent interactions using D3.js.
        
        Args:
            visualization_data: Dictionary with nodes and links data
            title: Optional title for the visualization
            
        Returns:
            HTML string
        """
        if not visualization_data or "visualization" not in visualization_data:
            return "<html><body><h1>No visualization data available</h1></body></html>"
            
        viz_data = visualization_data["visualization"]
        problem_id = visualization_data.get("problem_id", "unknown")
        agent_system = visualization_data.get("agent_system", "unknown")
        title = title or f"Agent Interactions - {agent_system} - Problem {problem_id}"
        
        
        # Escape JSON for embedding in HTML - ensure we're properly serializing the data
        json_data = json.dumps(viz_data)
        response_data = json.dumps(visualization_data)  # Pass the entire object with responses
        
        # Create HTML with D3.js and MathJax for LaTeX support
        html = """<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8">
    <title>{title}</title>
    <script src="https://d3js.org/d3.v7.min.js"></script>
    <!-- MathJax for LaTeX support -->
    <script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
    <script id="MathJax-script" async src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js"></script>
    <!-- Google Fonts -->
    <link href="https://fonts.googleapis.com/css2?family=Roboto:wght@300;400;500;700&display=swap" rel="stylesheet">
    <style>
        :root {{
            --primary-color: #4a6ee0;
            --primary-light: rgba(74, 110, 224, 0.1);
            --secondary-color: #6c757d;
            --success-color: #28a745;
            --info-color: #17a2b8;
            --warning-color: #ffc107;
            --danger-color: #dc3545;
            --error-color: #ff6b6b;
            --light-color: #f8f9fa;
            --dark-color: #343a40;
            --border-radius: 8px;
            --box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            --transition: all 0.3s ease;
        }}
        
        * {{
            box-sizing: border-box;
            margin: 0;
            padding: 0;
        }}
        
        body {{
            font-family: Arial, sans-serif;
            margin: 0;
            padding: 0;
            background-color: #f5f5f5;
            color: #333;
            --border-radius: 8px;
            --box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
            height: 100vh;
            overflow-y: auto;
        }}
        
        .container {{
            display: flex;
            flex-direction: column;
            height: 100vh;
            max-height: 100vh;
            padding: 20px;
            max-width: 1400px;
            margin: 0 auto;
            overflow: hidden;
        }}
        
        .header {{
            background-color: white;
            border-radius: var(--border-radius);
            padding: 20px;
            margin-bottom: 20px;
            box-shadow: var(--box-shadow);
            flex-shrink: 0;
        }}
        
        .header h1 {{
            color: var(--primary-color);
            font-size: 24px;
            margin-bottom: 10px;
        }}
        
        .header p {{
            color: var(--secondary-color);
            font-size: 14px;
        }}
        
        .main-content {{
            display: flex;
            flex: 1;
            gap: 20px;
            overflow: hidden;
            min-height: 0;
        }}
        
        #chart-container {{
            flex: 1;
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            overflow: hidden;
            position: relative;
            min-height: 0;
        }}
        
        #chart {{
            width: 100%;
            height: 100%;
            overflow: hidden;
        }}
        
        .details-panel {{
            width: 380px;
            background-color: white;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            padding: 20px;
            overflow-y: auto;
            max-height: calc(100vh - 180px);
            flex-shrink: 0;
        }}
        
        .details-panel h3 {{
            color: var(--primary-color);
            margin-bottom: 15px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }}
        
        .message {{
            border-left: 3px solid var(--primary-color);
            padding: 12px;
            margin-bottom: 15px;
            background-color: #f9f9f9;
            border-radius: 0 var(--border-radius) var(--border-radius) 0;
            transition: var(--transition);
        }}
        
        .message:hover {{
            box-shadow: var(--box-shadow);
        }}
        
        .message:last-child {{
            margin-bottom: 0;
        }}
        
        .message .agent {{
            font-weight: 500;
            color: var(--primary-color);
            margin-bottom: 8px;
            display: flex;
            justify-content: space-between;
        }}
        
        .message .agent .agent-role {{
            font-size: 12px;
            background-color: #e9ecef;
            padding: 2px 6px;
            border-radius: 12px;
            color: var(--secondary-color);
        }}
        
        .message .content {{
            white-space: pre-wrap;
            line-height: 1.5;
            color: #212529;
        }}
        
        .toolbar {{
            display: flex;
            justify-content: space-between;
            background-color: white;
            border-radius: var(--border-radius);
            padding: 10px 20px;
            margin-bottom: 20px;
            box-shadow: var(--box-shadow);
            flex-shrink: 0;
        }}
        
        .controls {{
            display: flex;
            gap: 10px;
        }}
        
        button {{
            padding: 8px 15px;
            border: none;
            background-color: var(--primary-color);
            color: white;
            border-radius: var(--border-radius);
            cursor: pointer;
            font-weight: 500;
            transition: var(--transition);
            display: flex;
            align-items: center;
            justify-content: center;
        }}
        
        button:hover {{
            background-color: #3a5ad1;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.2);
        }}
        
        button.secondary {{
            background-color: var(--secondary-color);
        }}
        
        button.secondary:hover {{
            background-color: #5a6268;
        }}
        
        .node {{
            cursor: pointer;
            transition: var(--transition);
        }}
        
        .node:hover circle {{
            stroke-width: 3px;
            stroke: #fff;
        }}
        
        .link {{
            stroke: #9baee5;
            stroke-opacity: 0.6;
            transition: var(--transition);
        }}
        
        .link:hover {{
            stroke-opacity: 1;
            stroke-width: 3px !important;
        }}
        
        .node text {{
            pointer-events: none;
            font-size: 12px;
            font-weight: 500;
            fill: white;
        }}
        
        .user-node {{
            fill: var(--primary-color);
            stroke: #3a5ad1;
            stroke-width: 2px;
        }}
        
        .agent-node {{
            fill: var(--success-color);
            stroke: #218838;
            stroke-width: 2px;
        }}
        
        /* Tooltip style */
        .tooltip {{
            position: absolute;
            background-color: white;
            padding: 10px;
            border-radius: var(--border-radius);
            box-shadow: var(--box-shadow);
            pointer-events: none;
            opacity: 0;
            transition: var(--transition);
            font-size: 12px;
        }}
        
        /* Loading indicator */
        .loading {{
            position: absolute;
            top: 50%;
            left: 50%;
            transform: translate(-50%, -50%);
            font-size: 18px;
            color: var(--secondary-color);
        }}
        
        /* Responsive design */
        @media screen and (max-width: 768px) {{
            .main-content {{
                flex-direction: column;
            }}
            
            .details-panel {{
                width: 100%;
                max-height: 300px;
            }}
        }}
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>{title}</h1>
            <p>Agent System: {agent_system} | Problem ID: {problem_id} | Generated: {timestamp}</p>
        </div>
        
        <div class="toolbar">
            <div class="controls">
                <button id="zoom-in" title="Zoom In">
                    Zoom In
                </button>
                <button id="zoom-out" title="Zoom Out">
                    Zoom Out
                </button>
                <button id="reset" title="Reset View">
                    Reset
                </button>
                <button id="show-all-messages" class="secondary" title="Show All Messages">
                    Show All Messages
                </button>
            </div>
        </div>
        
        <div class="main-content">
            <div id="chart-container">
                <div id="chart"></div>
                <div class="loading" id="loading">Loading visualization...</div>
            </div>
            
            <div class="details-panel" id="details" style="display: none;">
                <h3>Interaction Details</h3>
                <div id="messages"></div>
            </div>
        </div>
    </div>
    
    <script>
    // Graph data
    const data = {json_data};
    const responseData = {response_data};
    
    // Debug info - log the data
    console.log("Visualization data:", data);
    console.log("Response data:", responseData);
    
    // Initialize the visualization
    function initVisualization() {{
        document.getElementById('loading').style.display = 'none';
        
        const chartContainer = document.getElementById('chart-container');
        const width = chartContainer.clientWidth;
        const height = chartContainer.clientHeight;
        
        // Create tooltip
        const tooltip = d3.select("body").append("div")
            .attr("class", "tooltip")
            .style("opacity", 0);
        
        // Create SVG
        const svg = d3.select("#chart")
            .append("svg")
            .attr("width", width)
            .attr("height", height)
            .call(d3.zoom().on("zoom", function(event) {{
                g.attr("transform", event.transform);
            }}));
            
        const g = svg.append("g");
        
        // Create force simulation
        const simulation = d3.forceSimulation(data.nodes)
            .force("link", d3.forceLink(data.links).id(d => d.id).distance(180))
            .force("charge", d3.forceManyBody().strength(-600))
            .force("center", d3.forceCenter(width / 2, height / 2))
            .force("collide", d3.forceCollide().radius(70));
            
        // Draw links
        const link = g.append("g")
            .attr("class", "links")
            .selectAll("line")
            .data(data.links)
            .enter()
            .append("line")
            .attr("class", "link")
            .attr("stroke-width", function(d) {{ return Math.sqrt(d.value) * 2; }})
            .on("mouseover", function(event, d) {{
                tooltip.transition()
                    .duration(200)
                    .style("opacity", .9);
                tooltip.html("<strong>" + d.source.id + " → " + d.target.id + "</strong><br>Messages: " + d.value)
                    .style("left", (event.pageX + 10) + "px")
                    .style("top", (event.pageY - 28) + "px");
                
                d3.select(event.target)
                    .style("stroke-opacity", 1)
                    .style("stroke-width", Math.sqrt(d.value) * 3);
            }})
            .on("mouseout", function(event, d) {{
                tooltip.transition()
                    .duration(500)
                    .style("opacity", 0);
                
                d3.select(event.target)
                    .style("stroke-opacity", 0.6)
                    .style("stroke-width", Math.sqrt(d.value) * 2);
            }})
            .on("click", function(event, d) {{
                console.log("Link clicked:", d);
                showMessages(d);
                
                // Highlight selected link
                d3.selectAll(".link").style("stroke", "#9baee5");
                d3.select(event.target).style("stroke", "#ff7f0e");
            }});
            
        // Add arrows to links
        g.append("defs").selectAll("marker")
            .data(data.links)
            .enter().append("marker")
            .attr("id", function(d, i) {{ return "arrow-" + i; }})
            .attr("viewBox", "0 -5 10 10")
            .attr("refX", 45)
            .attr("refY", 0)
            .attr("markerWidth", 8)
            .attr("markerHeight", 8)
            .attr("orient", "auto")
            .append("path")
            .attr("d", "M0,-5L10,0L0,5Z")
            .attr("fill", "#9baee5")
            .attr("stroke", "white")
            .attr("stroke-width", "1");

        link.attr("marker-end", function(d, i) {{ return "url(#arrow-" + i + ")"; }});
        
        // Draw nodes
        const nodeGroup = g.append("g")
            .attr("class", "nodes")
            .selectAll("g")
            .data(data.nodes)
            .enter()
            .append("g")
            .attr("class", "node")
            .call(d3.drag()
                .on("start", dragStarted)
                .on("drag", dragged)
                .on("end", dragEnded))
            .on("mouseover", function(event, d) {{
                tooltip.transition()
                    .duration(200)
                    .style("opacity", .9);
                tooltip.html("<strong>" + d.id + "</strong><br>Type: " + d.type)
                    .style("left", (event.pageX + 10) + "px")
                    .style("top", (event.pageY - 28) + "px");
            }})
            .on("mouseout", function(event, d) {{
                tooltip.transition()
                    .duration(500)
                    .style("opacity", 0);
            }})
            .on("click", function(event, d) {{
                showAgentMessages(d.id);
            }});
                
        // Add circles for nodes
        nodeGroup.append("circle")
            .attr("r", 35)
            .attr("class", function(d) {{ return d.type === "user" ? "user-node" : "agent-node"; }});
            
        // Add labels to nodes
        nodeGroup.append("text")
            .attr("dy", ".35em")
            .attr("text-anchor", "middle")
            .text(function(d) {{ return d.id; }});
            
        // Update positions on tick
        simulation.on("tick", function() {{
            link
                .attr("x1", function(d) {{ return d.source.x; }})
                .attr("y1", function(d) {{ return d.source.y; }})
                .attr("x2", function(d) {{ return d.target.x; }})
                .attr("y2", function(d) {{ return d.target.y; }});
                
            nodeGroup.attr("transform", function(d) {{ return "translate(" + d.x + "," + d.y + ")"; }});
        }});
        
        // Drag functions
        function dragStarted(event, d) {{
            if (!event.active) simulation.alphaTarget(0.3).restart();
            d.fx = d.x;
            d.fy = d.y;
        }}
        
        function dragged(event, d) {{
            d.fx = event.x;
            d.fy = event.y;
        }}
        
        function dragEnded(event, d) {{
            if (!event.active) simulation.alphaTarget(0);
            d.fx = null;
            d.fy = null;
        }}
        
        // Zoom controls
        document.getElementById('zoom-in').addEventListener('click', function() {{
            svg.transition().duration(500).call(
                d3.zoom().transform,
                d3.zoomIdentity.translate(width/2, height/2).scale(1.5).translate(-width/2, -height/2)
            );
        }});
        
        document.getElementById('zoom-out').addEventListener('click', function() {{
            svg.transition().duration(500).call(
                d3.zoom().transform,
                d3.zoomIdentity.translate(width/2, height/2).scale(0.5).translate(-width/2, -height/2)
            );
        }});
        
        document.getElementById('reset').addEventListener('click', function() {{
            svg.transition().duration(500).call(
                d3.zoom().transform,
                d3.zoomIdentity
            );
        }});
        
        // Show all messages button
        document.getElementById('show-all-messages').addEventListener('click', showAllMessages);
    }}
    
    // Show messages for a link
    function showMessages(link) {{
        console.log("ShowMessages called with link:", link);
        
        const detailsPanel = document.getElementById('details');
        const messagesDiv = document.getElementById('messages');
        messagesDiv.innerHTML = '';
        
        if (!responseData.responses || responseData.responses.length === 0) {{
            console.error("No response data available");
            messagesDiv.textContent = 'No message data available in the visualization.';
            detailsPanel.style.display = 'block';
            return;
        }}
        
        console.log("Available responses:", responseData.responses.length);
        
        const filteredMessages = [];
        
        // Get messages involved in this link using message_indices
        if (link.message_indices && Array.isArray(link.message_indices)) {{
            console.log("Message indices:", link.message_indices);
            
            link.message_indices.forEach(index => {{
                if (index >= 0 && index < responseData.responses.length) {{
                    console.log("Adding message from index:", index);
                    filteredMessages.push(responseData.responses[index]);
                }} else {{
                    console.warn("Message index out of bounds:", index);
                }}
            }});
        }} else {{
            console.warn("No valid message indices found in the link");
        }}
        
        if (filteredMessages.length > 0) {{
            console.log("Filtered messages to display:", filteredMessages);
            
            // Display the messages
            filteredMessages.forEach(msg => {{
                const messageDiv = document.createElement('div');
                messageDiv.className = 'message';
                
                const agentDiv = document.createElement('div');
                agentDiv.className = 'agent';
                
                const agentName = document.createElement('span');
                agentName.textContent = msg.agent_id || 'Unknown';
                agentDiv.appendChild(agentName);
                
                const agentRole = document.createElement('span');
                agentRole.className = 'agent-role';
                agentRole.textContent = msg.role || 'Unknown';
                agentDiv.appendChild(agentRole);
                
                messageDiv.appendChild(agentDiv);
                
                const contentDiv = document.createElement('div');
                contentDiv.className = 'content';
                contentDiv.innerHTML = msg.content || 'No content';
                messageDiv.appendChild(contentDiv);
                
                messagesDiv.appendChild(messageDiv);
            }});
            
            detailsPanel.style.display = 'block';
            
            // Render LaTeX after adding content
            if (window.MathJax) {{
                MathJax.typesetPromise();
            }}
        }} else {{
            console.warn("No messages found for this interaction");
            messagesDiv.textContent = 'No messages found for this interaction.';
            detailsPanel.style.display = 'block';
            
            // As a fallback, show all messages if no specific ones are found
            const fallbackButton = document.createElement('button');
            fallbackButton.className = 'secondary';
            fallbackButton.textContent = 'Show All Messages';
            fallbackButton.addEventListener('click', function() {{ showAllMessages(); }});
            messagesDiv.appendChild(document.createElement('br'));
            messagesDiv.appendChild(document.createElement('br'));
            messagesDiv.appendChild(fallbackButton);
        }}
    }}
    
    // Show messages for a specific agent
    function showAgentMessages(agentId) {{
        console.log("Showing messages for agent:", agentId);
        
        const detailsPanel = document.getElementById('details');
        const messagesDiv = document.getElementById('messages');
        messagesDiv.innerHTML = '';
        
        if (!responseData.responses || responseData.responses.length === 0) {{
            messagesDiv.textContent = 'No message data available.';
            detailsPanel.style.display = 'block';
            return;
        }}
        
        // Filter messages for this agent
        const agentMessages = responseData.responses.filter(msg => msg.agent_id === agentId);
        
        if (agentMessages.length > 0) {{
            // Add agent header
            const headerDiv = document.createElement('div');
            headerDiv.style.marginBottom = '15px';
            headerDiv.style.paddingBottom = '10px';
            headerDiv.style.borderBottom = '1px solid #eee';
            headerDiv.innerHTML = "<strong>Messages from " + agentId + "</strong> (" + agentMessages.length + " messages)";
            messagesDiv.appendChild(headerDiv);
            
            // Display the messages
            agentMessages.forEach(msg => {{
                const messageDiv = document.createElement('div');
                messageDiv.className = 'message';
                
                const agentDiv = document.createElement('div');
                agentDiv.className = 'agent';
                
                const agentName = document.createElement('span');
                agentName.textContent = msg.agent_id || 'Unknown';
                agentDiv.appendChild(agentName);
                
                const agentRole = document.createElement('span');
                agentRole.className = 'agent-role';
                agentRole.textContent = msg.role || 'Unknown';
                agentDiv.appendChild(agentRole);
                
                messageDiv.appendChild(agentDiv);
                
                const contentDiv = document.createElement('div');
                contentDiv.className = 'content';
                contentDiv.innerHTML = msg.content || 'No content';
                messageDiv.appendChild(contentDiv);
                
                messagesDiv.appendChild(messageDiv);
            }});
            
            detailsPanel.style.display = 'block';
            
            // Render LaTeX
            if (window.MathJax) {{
                MathJax.typesetPromise();
            }}
        }} else {{
            messagesDiv.textContent = "No messages found for agent: " + agentId;
            detailsPanel.style.display = 'block';
        }}
    }}
    
    // Show all messages (fallback)
    function showAllMessages() {{
        console.log("Showing all messages");
        
        const detailsPanel = document.getElementById('details');
        const messagesDiv = document.getElementById('messages');
        messagesDiv.innerHTML = '';
        
        if (responseData.responses && responseData.responses.length > 0) {{
            // Add header
            const headerDiv = document.createElement('div');
            headerDiv.style.marginBottom = '15px';
            headerDiv.style.paddingBottom = '10px';
            headerDiv.style.borderBottom = '1px solid #eee';
            headerDiv.innerHTML = "<strong>All Messages</strong> (" + responseData.responses.length + " messages)";
            messagesDiv.appendChild(headerDiv);
            
            // Display all messages
            responseData.responses.forEach((msg, index) => {{
                const messageDiv = document.createElement('div');
                messageDiv.className = 'message';
                
                const agentDiv = document.createElement('div');
                agentDiv.className = 'agent';
                
                const agentName = document.createElement('span');
                agentName.textContent = index + ": " + (msg.agent_id || 'Unknown');
                agentDiv.appendChild(agentName);
                
                const agentRole = document.createElement('span');
                agentRole.className = 'agent-role';
                agentRole.textContent = msg.role || 'Unknown';
                agentDiv.appendChild(agentRole);
                
                messageDiv.appendChild(agentDiv);
                
                const contentDiv = document.createElement('div');
                contentDiv.className = 'content';
                contentDiv.innerHTML = msg.content || 'No content';
                messageDiv.appendChild(contentDiv);
                
                messagesDiv.appendChild(messageDiv);
            }});
            
            detailsPanel.style.display = 'block';
            
            // Render LaTeX
            if (window.MathJax) {{
                MathJax.typesetPromise();
            }}
        }} else {{
            messagesDiv.textContent = 'No messages available.';
            detailsPanel.style.display = 'block';
        }}
    }}
    
    // Initialize visualization when document is loaded
    document.addEventListener('DOMContentLoaded', initVisualization);
    </script>
</body>
</html>""".format(
            title=title,
            agent_system=agent_system,
            problem_id=problem_id,
            timestamp=datetime.datetime.now().strftime('%Y-%m-%d %H:%M:%S'),
            json_data=json_data,
            response_data=response_data
        )
        return html
        
    def visualize(self, visualization_file, output_file=None, open_browser=True):
        """
        Generate an HTML visualization from a visualization data file and open in browser.
        
        Args:
            visualization_file: Path to the visualization data JSON file
            output_file: Optional path to save the HTML output
            open_browser: Whether to open the visualization in a browser (default: True)
            
        Returns:
            Path to the generated HTML file
        """
        # Load visualization data
        with open(visualization_file, 'r') as f:
            visualization_data = json.load(f)
            
        # Generate HTML
        html = self.generate_html(visualization_data)
        
        # Determine output filename
        if not output_file:
            timestamp = datetime.datetime.now().strftime("%Y%m%d_%H%M%S")
            problem_id = visualization_data.get("problem_id", "unknown")
            agent_system = visualization_data.get("agent_system", "unknown")
            output_file = self.output_dir / f"viz_{agent_system}_{problem_id}_{timestamp}.html"
            
        # Save HTML file
        with open(output_file, 'w') as f:
            f.write(html)
            
        # Open in browser if requested
        if open_browser:
            webbrowser.open(f"file://{os.path.abspath(output_file)}")
        
        return output_file
        
    def visualize_from_agent_system(self, agent_system, problem_id=None):
        """
        Generate visualizations for all visualization files from an agent system.
        
        Args:
            agent_system: AgentSystem instance
            problem_id: Optional problem ID to filter by
            
        Returns:
            List of paths to generated HTML files
        """
        # Get path to visualizations directory
        viz_dir = agent_system.visualizations_dir
        
        # List all visualization files
        viz_files = list(viz_dir.glob("viz_*.json"))
        
        # Filter by problem ID if provided
        if problem_id:
            viz_files = [f for f in viz_files if problem_id in f.name]
            
        # Generate HTML for each file
        html_files = []
        for viz_file in viz_files:
            html_file = self.visualize(viz_file)
            html_files.append(html_file)
            
        return html_files
        

def main():
    """Command line interface for the MAS visualizer"""
    parser = argparse.ArgumentParser(description="Visualize Multi-Agent System interactions and benchmark results")
    subparsers = parser.add_subparsers(dest="command", help="Command to run")
    
    # Agent visualization command
    agent_parser = subparsers.add_parser("agent", help="Visualize agent interactions")
    agent_parser.add_argument("--file", "-f", help="Path to the visualization data JSON file")
    agent_parser.add_argument("--output", "-o", help="Output path for the HTML file")
    agent_parser.add_argument("--dir", "-d", help="Directory containing visualization files to process")
    
    # Benchmark visualization command
    benchmark_parser = subparsers.add_parser("benchmark", help="Visualize benchmark results")
    benchmark_parser.add_argument("--summary", "-s", required=True, help="Path to the benchmark summary JSON file")
    benchmark_parser.add_argument("--results", "-r", help="Path to the benchmark results JSON file")
    benchmark_parser.add_argument("--visualizations-dir", "-v", help="Directory containing problem visualizations")
    benchmark_parser.add_argument("--output", "-o", help="Output path for the HTML file")
    
    args = parser.parse_args()
    
    if args.command == "agent":
        visualizer = MASVisualizer()
        
        if args.file:
            visualizer.visualize(args.file, args.output)
        elif args.dir:
            viz_dir = Path(args.dir)
            viz_files = list(viz_dir.glob("viz_*.json"))
            
            for viz_file in viz_files:
                visualizer.visualize(viz_file)
        else:
            agent_parser.print_help()
    elif args.command == "benchmark":
        visualizer = BenchmarkVisualizer()
        
        if args.summary:
            visualizer.visualize_benchmark(
                summary_file=args.summary,
                results_file=args.results,
                visualizations_dir=args.visualizations_dir,
                output_file=args.output
            )
        else:
            benchmark_parser.print_help()
    else:
        parser.print_help()
        

if __name__ == "__main__":
    main() 